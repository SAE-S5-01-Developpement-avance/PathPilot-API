name: CI # Name of the workflow

on: # Specifies the events that trigger the workflow
  workflow_dispatch: # Allows the workflow to be manually triggered
  push: # Triggers the workflow on push events

jobs: # Defines the jobs that will run in the workflow
  build: # Name of the job
    runs-on: ubuntu-latest # Specifies the type of runner to use

    steps: # Defines the steps that the job will run
      - name: Checkout code # Step to check out the code from the repository
        uses: actions/checkout@v3 # Uses the checkout action to clone the repository

      - name: Set up JDK 21 # Step to set up Java Development Kit (JDK) version 21
        uses: actions/setup-java@v3 # Uses the setup-java action
        with: # Specifies the input parameters for the action
          distribution: 'temurin' # Specifies the JDK distribution to use
          java-version: '21' # Specifies the JDK version to use

      - name: Create .env file # This step creates the .env file
        run: |
          echo "MYSQL_HOST=${{ secrets.MYSQL_HOST }}" > .env
          echo "MYSQL_PORT=${{ secrets.MYSQL_PORT }}" >> .env
          echo "MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}" >> .env
          echo "MYSQL_USER=${{ secrets.MYSQL_USER }}" >> .env
          echo "MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}" >> .env
          echo "MONGO_HOST=${{ secrets.MONGO_HOST }}" >> .env
          echo "MONGO_PORT=${{ secrets.MONGO_PORT }}" >> .env
          echo "MONGO_USER=${{ secrets.MONGO_USER }}" >> .env
          echo "MONGO_PASSWORD=${{ secrets.MONGO_PASSWORD }}" >> .env
          echo "MONGO_DATABASE=${{ secrets.MONGO_INITDB_DATABASE }}" >> .env
          echo "MONGO_INITDB_DATABASE=${{ secrets.MONGO_INITDB_DATABASE }}" >> .env
          echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" >> .env

      - name: Run PathPilot DB container # Step to start the MySQL and MongoDB containers
        run: | 
          docker compose -f ./docker/docker-compose-dev.yml up -d mysql
          docker compose -f ./docker/docker-compose-dev.yml up -d mongodb 

      - name: Cache Gradle packages # Step to cache Gradle dependencies to speed up the build process
        uses: actions/cache@v3 # Uses the cache action
        with: # Specifies the input parameters for the action
          path: | # Specifies the paths to cache
            ~/.gradle/caches # Caches Gradle caches
            ~/.gradle/wrapper # Caches Gradle wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }} # Generates a cache key based on the OS and Gradle files
          restore-keys: | # Specifies the restore keys for the cache
            ${{ runner.os }}-gradle- # Restores the cache based on the OS

      - name: Grant execute permission for gradlew # Step to grant execute permission for the Gradle wrapper script
        run: chmod +x ./gradlew # Runs the chmod command to make the script executable

      - name: Build with Gradle # Step to build the project using Gradle
        run: ./gradlew build --no-daemon # Runs the Gradle build command without using the Gradle daemon

      - name: Run tests # Step to run the tests using Gradle
        run: ./gradlew test --no-daemon # Runs the Gradle test command without using the Gradle daemon

      - name: Check code quality # Step to check the code quality using Gradle
        run: ./gradlew check --no-daemon # Runs the Gradle check command without using the Gradle daemon

      - name: Generate JaCoCo report # Step to generate a code coverage report using JaCoCo
        run: ./gradlew jacocoTestReport --no-daemon # Runs the Gradle JaCoCo report command without using the Gradle daemon

      - name: Archive JaCoCo report # Step to archive the JaCoCo report as an artifact
        uses: actions/upload-artifact@v4 # Uses the upload-artifact action
        with: # Specifies the input parameters for the action
          name: jacoco-report # Names the artifact
          path: build/reports/jacoco/test/html # Specifies the path to the JaCoCo report
