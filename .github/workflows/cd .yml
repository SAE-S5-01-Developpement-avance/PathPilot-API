name: CD

on:
  workflow_dispatch: # Manually run the workflow
  push:
    branches:
        - main # run workflow when pushing on main branch

jobs: # Define the jobs that will run in the workflow
  deploy: # Name of the job
    runs-on: ubuntu-latest # The type of runner that the job will run on

    steps: # Define the steps that the job will run
      - name: Checkout code # This step checks out the code in the repository
        uses: actions/checkout@v3

      - name: Set up JDK 21 # This step sets up the JDK 21
        uses: actions/setup-java@v3
        with: # The input parameters for the action
          distribution: 'temurin' # The JDK distribution
          java-version: '21' # The JDK version

      - name: Grant execute permission for gradlew # This step grants execute permission for the gradlew script
        run: chmod +x gradlew

      - name: Build with Gradle # This step builds the project with Gradle
        run: ./gradlew build -x test # builds the project with Gradle and skips the tests

      - name: Set up Docker Buildx # This step sets up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub # This step logs in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }} # The Docker Hub username, GitHub secrets
          password: ${{ secrets.DOCKER_ACCESS_TOKEN }} # The Docker Hub access token, GitHub secrets

      - name: Build and push Docker image # This step builds and pushes the Docker image
        run: |
          docker build -t path-pilotapi .
          docker tag path-pilotapi:latest ${{ secrets.DOCKER_USERNAME }}/path-pilotapi:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/path-pilotapi:latest

      - name: Create temporary SSH key file # This step creates a temporary SSH key file
        run: echo "${{ secrets.SSH_KEY }}" > temp_ssh_key.pem

      - name: Set permissions for SSH key file # This step sets permissions for the SSH key file
        run: chmod 600 temp_ssh_key.pem

      - name: Create .env file # This step creates the .env file
        run: |
          echo "MYSQL_HOST=${{ secrets.MYSQL_HOST }}" > .env
          echo "MYSQL_PORT=${{ secrets.MYSQL_PORT }}" >> .env
          echo "MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}" >> .env
          echo "MYSQL_USER=${{ secrets.MYSQL_USER }}" >> .env
          echo "MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}" >> .env
          echo "MONGO_HOST=${{ secrets.MONGO_HOST }}" >> .env
          echo "MONGO_PORT=${{ secrets.MONGO_PORT }}" >> .env
          echo "MONGO_USER=${{ secrets.MONGO_USER }}" >> .env
          echo "MONGO_PASSWORD=${{ secrets.MONGO_PASSWORD }}" >> .env
          echo "MONGO_DATABASE=${{ secrets.MONGO_INITDB_DATABASE }}" >> .env
          echo "MONGO_INITDB_DATABASE=${{ secrets.MONGO_INITDB_DATABASE }}" >> .env
          echo "ORS_API_KEY=${{ secrets.ORS_API_KEY }}" >> .env
          echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" >> .env

      - name: Upload files to EC2 # This step uploads files to EC2
        run: |
          scp -o StrictHostKeyChecking=no -i temp_ssh_key.pem ./docker/docker-compose-api.yml .env ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/home/${{ secrets.SSH_USER }}/

      - name: Run Docker on EC2 # This step runs Docker on EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i temp_ssh_key.pem ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/path-pilotapi:latest
            sudo docker compose down
            sudo docker compose -f docker-compose-api.yml up -d
          EOF

      - name: Clean up temporary SSH key file # This step cleans up the temporary SSH key file
        run: rm temp_ssh_key.pem